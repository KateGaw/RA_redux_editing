{"version":3,"sources":["actions/actionCrud.js","actions/actionTypes.js","components/ServiceCrud.js","components/ServiceList.js","components/ServiceCrudClassBased.js","components/ServiceListClassBased.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceCrud.js","store/index.js","index.js"],"names":["addService","id","name","price","type","payload","removeService","changeServiceField","value","editService","ServiceCrud","item","useSelector","state","serviceCrud","dispatch","useDispatch","handleChange","evt","target","onSubmit","preventDefault","className","onChange","onClick","ServiceList","items","serviceList","map","o","key","obj","handleEdit","ServiceCrudClassBased","props","handleSubmit","onSave","handleCancel","this","Component","connect","ServiceListClassBased","handleRemove","mapDispatchToProps","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","Number","idToRemove","filter","service","toString","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a240b5cf.chunk.js","sourcesContent":["import {\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n  CHANGE_SERVICE_FIELD,\n  EDIT_SERVICE,\n} from \"./actionTypes\";\n\nexport function addService(id, name, price) {\n  return { type: ADD_SERVICE, payload: { id, name, price } };\n}\n\nexport function removeService(id) {\n  return { type: REMOVE_SERVICE, payload: { id } };\n}\n\nexport function changeServiceField(name, value) {\n  return { type: CHANGE_SERVICE_FIELD, payload: { name, value } };\n}\n\nexport function editService(id, name, price) {\n  return { type: EDIT_SERVICE, payload: { id, name, price } };\n}\n","export const ADD_SERVICE = \"ADD_SERVICE\";\nexport const REMOVE_SERVICE = \"REMOVE_SERVICE\";\nexport const CHANGE_SERVICE_FIELD = \"CHANGE_SERVICE_FIELD\";\nexport const EDIT_SERVICE = \"EDIT_SERVICE\";\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeServiceField, addService } from \"../actions/actionCrud\";\n\nfunction ServiceCrud() {\n  const item = useSelector((state) => state.serviceCrud);\n  const dispatch = useDispatch();\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    dispatch(changeServiceField(name, value));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    dispatch(addService(item.id, item.name, item.price));\n  };\n\n  const handleCancel = (evt) => {\n    evt.preventDefault();\n    dispatch(changeServiceField('id', ''));\n    dispatch(changeServiceField('name', ''));\n    dispatch(changeServiceField('price', ''));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='form'>\n      <input name=\"name\" onChange={handleChange} value={item.name} />\n      <input name=\"price\" onChange={handleChange} value={item.price} />\n      <button type=\"submit\">Save</button>\n      <button type=\"button\" onClick={handleCancel}>\n        Cancel\n      </button>\n    </form>\n  );\n}\n\nexport default ServiceCrud;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { removeService, editService } from \"../actions/actionCrud\";\n\nfunction ServiceList() {\n  const items = useSelector((state) => state.serviceList);\n  const dispatch = useDispatch();\n\n  const handleRemove = (id) => {\n    dispatch(removeService(id));\n  };\n\n  const handleEdit = (obj) => {\n    const { id, name, price } = obj;\n    dispatch(editService(id, name, price));\n  };\n\n  return (\n    <ul>\n      {items.map((o) => (\n        <li key={o.id} className='li_item'>\n          {o.name} {o.price}\n          <button onClick={() => handleEdit(o)}>✎</button>\n          <button onClick={() => handleRemove(o.id)}>✕</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ServiceList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { changeServiceField, addService } from \"../actions/actionCrud\";\n\nclass ServiceCrudClassBased extends Component {\n  handleChange = (evt) => {\n    const { name, value } = evt.target;\n    this.props.onChange(name, value);\n  };\n\n  handleSubmit = (evt) => {\n    const { item } = this.props;\n    evt.preventDefault();\n    this.props.onSave(item.id, item.name, item.price);\n  };\n\n  handleCancel = (evt) => {\n    evt.preventDefault();\n    this.props.onChange('id', '');\n    this.props.onChange('name', '');\n    this.props.onChange('price', '');\n  };\n\n  render() {\n    const { item } = this.props;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input name=\"name\" onChange={this.handleChange} value={item.name} />\n        <input name=\"price\" onChange={this.handleChange} value={item.price} />\n        <button type=\"submit\"> Save </button>\n        <button type=\"button\" onClick={this.handleCancel}>\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nServiceCrudClassBased.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    price: PropTypes.string,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  item: state.serviceCrud,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange: (name, value) => dispatch(changeServiceField(name, value)),\n    onSave: (id, name, price) => dispatch(addService(id, name, price)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ServiceCrudClassBased);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { removeService, editService } from \"../actions/actionCrud\";\nimport { connect } from \"react-redux\";\n\nclass ServiceListClassBased extends Component {\n  handleRemove = (id) => {\n    this.props.removeService(id);\n  };\n\n  handleEdit = (obj) => {\n    const { id, name, price } = obj;\n    this.props.editService(id, name, price);\n  };\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <ul>\n        {items.map((o) => (\n          <li key={o.id}>\n            {o.name} {o.price}\n            <button onClick={() => this.handleEdit(o)}>✎</button>\n            <button onClick={() => this.handleRemove(o.id)}>✕</button>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nServiceListClassBased.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      price: PropTypes.number,\n    })\n  ).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  items: state.serviceList,\n});\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     removeService: id => dispatch(removeService(id))\n//   }\n// };\n\nconst mapDispatchToProps = {\n  editService,\n  removeService,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ServiceListClassBased);\n","import React from \"react\";\nimport ServiceCrud from \"./components/ServiceCrud\";\nimport ServiceList from \"./components/ServiceList\";\nimport ServiceCrudClassBased from \"./components/ServiceCrudClassBased\";\nimport ServiceListClassBased from \"./components/ServiceListClassBased\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <ServiceCrud />\n      <ServiceList />\n      <hr />\n      <ServiceCrudClassBased />\n      <ServiceListClassBased />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { nanoid } from \"nanoid\";\nimport { ADD_SERVICE, REMOVE_SERVICE } from \"../actions/actionTypes\";\n\nconst initialState = [\n  { id: nanoid(), name: \"Замена стекла\", price: 21000 },\n  { id: nanoid(), name: \"Замена дисплея\", price: 25000 },\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE:\n      const { id, name, price } = action.payload;\n      if (!id) {\n        return [...state, { id: nanoid(), name, price: Number(price) }];\n      } else {\n        return state.map((o) =>\n          o.id !== id ? o : { id: id, name: name, price: Number(price) }\n        );\n      }\n    case REMOVE_SERVICE:\n      const { id: idToRemove } = action.payload;\n      return state.filter((service) => service.id !== idToRemove);\n    default:\n      return state;\n  }\n}\n","import {\n  CHANGE_SERVICE_FIELD,\n  EDIT_SERVICE,\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  id: null,\n  name: \"\",\n  price: \"\",\n};\n\nexport default function serviceCrudReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const { name, value } = action.payload;\n      return { ...state, [name]: value };\n    case EDIT_SERVICE:\n      return { ...action.payload, price: action.payload.price.toString() };\n    case ADD_SERVICE:\n      return initialState;\n    case REMOVE_SERVICE:\n      const { id } = action.payload;\n      if (id && id === state.id) {\n        return initialState;\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceCrudReducer from '../reducers/serviceCrud';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceCrud: serviceCrudReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}